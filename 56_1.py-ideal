import csv
import tkinter as tk
from tkinter import ttk, messagebox
import random
from tkinter.font import Font
from collections import defaultdict
import threading

class ServerConfigEditor(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Server Configuration Editor")
        self.geometry("1600x1000")
        
        self.csv_file = "servers.csv"
        self.services = []
        self.servers = []
        self.service_zones = {}
        self.active_server = None
        self.start_x = 0
        self.start_y = 0
        self.resizing = False

        self.stack_area_width = 400
        self.stack_spacing = 5
        self.column_spacing = 20
        self.service_area_padding = 50
        self.service_columns = 4
        
        self.server_font = Font(family="Arial", size=10)
        self.service_font = Font(family="Arial", size=10, weight="bold")
        self.button_font = Font(family="Arial", size=8)
        
        self.colors = {}
        self.server_positions = defaultdict(list)
        self.service_buttons = {}
        
        self.init_ui()
        self.load_data()
        
        self.bind("<Configure>", self.on_window_resize)
        self.protocol("WM_DELETE_WINDOW", self.safe_exit)

    def init_ui(self):
        self.main_frame = ttk.Frame(self)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        self.canvas = tk.Canvas(self.main_frame, bg="white")
        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        self.save_btn = ttk.Button(
            self.main_frame, 
            text="Save Configuration", 
            command=self.save_config
        )
        self.save_btn.pack(side=tk.BOTTOM, pady=10)

    def load_data(self):
        try:
            threading.Thread(target=self.load_data_thread, daemon=True).start()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load data: {str(e)}")
            self.destroy()

    def load_data_thread(self):
        try:
            with open(self.csv_file, 'r') as f:
                reader = csv.reader(f)
                headers = next(reader)
                self.services = headers[4:]
                
                servers = defaultdict(list)
                for row in reader:
                    if len(row) < 4:
                        continue
                    servers[row[0]].append(row)
                
                if not servers:
                    self.after(0, lambda: messagebox.showwarning("Warning", "No servers found in CSV file"))
                    return
                
                for server_ip, rows in servers.items():
                    for _ in range(20):
                        self.add_server(rows[0])
                
                self.after(0, self.finish_load)
                
        except Exception as e:
            self.after(0, lambda: messagebox.showerror("Error", f"Failed to load data: {str(e)}"))
            self.after(0, self.destroy)

    def finish_load(self):
        self.draw_services()
        self.organize_stacks()

    def add_server(self, row):
        server_ip = row[0]
        if server_ip not in self.colors:
            self.colors[server_ip] = f"#{random.randint(0, 0xFFFFFF):06x}"
        
        server = {
            "ip": server_ip,
            "data": row,
            "color": self.colors[server_ip],
            "items": [],
            "coords": [0, 0],
            "original_pos": (0, 0),
            "services": set()
        }
        
        self.servers.append(server)
        self.server_positions[server_ip].append(server)

    def organize_stacks(self):
        x_start = 20
        y_start = 20
        max_per_column = 10
        
        groups = list(self.server_positions.items())
        half = len(groups) // 2
        
        for idx, (server_ip, servers) in enumerate(groups[:half]):
            x = x_start
            y = y_start + idx * 150
            for i, server in enumerate(servers):
                self.create_server_shape(server, x, y + i * self.stack_spacing)
        
        x_start += 200
        for idx, (server_ip, servers) in enumerate(groups[half:]):
            x = x_start
            y = y_start + idx * 150
            for i, server in enumerate(servers):
                self.create_server_shape(server, x, y + i * self.stack_spacing)

    def create_server_shape(self, server, x, y):
        text_width = self.server_font.measure(server["ip"])
        text_height = self.server_font.metrics("linespace")
        padding = 5
        
        server["items"] = [
            self.canvas.create_rectangle(
                x - padding, 
                y - padding, 
                x + text_width + padding, 
                y + text_height + padding,
                fill=server["color"], 
                outline="#333333",
                width=1,
                tags=("server", f"server_{server['ip']}")
            ),
            self.canvas.create_text(
                x, y,
                text=server["ip"], 
                font=self.server_font,
                anchor=tk.NW,
                fill="#ffffff" if self.is_dark(server["color"]) else "#000000",
                tags=("server", f"server_{server['ip']}")
            )
        ]
        server["coords"] = [x, y]
        server["original_pos"] = (x, y)
        
        self.canvas.tag_raise("server")
        for item in server["items"]:
            self.canvas.tag_bind(item, "<ButtonPress-1>", 
                               lambda e, s=server: self.start_drag(e, s))
            self.canvas.tag_bind(item, "<B1-Motion>", 
                               lambda e, s=server: self.drag(e, s))
            self.canvas.tag_bind(item, "<ButtonRelease-1>", 
                               lambda e, s=server: self.end_drag(e, s))

    def draw_services(self):
        self.canvas.delete("service")
        if not self.services or not self.winfo_viewable():
            return

        canvas_width = max(self.winfo_width(), 800)
        canvas_height = max(self.winfo_height(), 600)
        
        start_x = self.stack_area_width + self.service_area_padding
        start_y = self.service_area_padding
        
        service_width = (canvas_width - self.stack_area_width - 
                        self.service_area_padding * (self.service_columns + 1)) // self.service_columns
        service_height = 180
        
        for idx, service in enumerate(self.services):
            col = idx % self.service_columns
            row = idx // self.service_columns
            
            x = start_x + col * (service_width + self.service_area_padding)
            y = start_y + row * (service_height + 50)
            
            self.service_zones[service] = (x, y, x + service_width, y + service_height)
            
            # Рисуем сервис на заднем плане
            self.canvas.create_rectangle(
                x, y, x + service_width, y + service_height,
                fill="#f8f8f8", outline="#cccccc", width=2, tags=("service", "background")
            )
            
            # Заголовок сервиса
            header_height = 40
            self.canvas.create_rectangle(
                x, y, x + service_width, y + header_height,
                fill="#e0e0e0", outline="#cccccc", width=1, tags=("service_header", "background")
            )
            
            # Текст сервиса
            text_width = self.service_font.measure(service)
            text_x = x + (service_width - text_width) // 2
            self.canvas.create_text(
                text_x, y + header_height//2,
                text=service, 
                font=self.service_font, 
                tags=("service_header", "background")
            )
            
            # Кнопка добавления
            if service not in self.service_buttons:
                btn = ttk.Button(
                    self.canvas,
                    text="Add Servers",
                    width=12,
                    command=lambda s=service: self.add_all_servers(s)
                )
                self.service_buttons[service] = btn
                self.canvas.create_window(
                    x + service_width - 70,
                    y + header_height//2,
                    window=btn,
                    anchor=tk.CENTER,
                    tags=("service_button", "background")
                )
        
        # Управление слоями
        self.canvas.tag_lower("background")
        self.canvas.tag_raise("server")

    def add_all_servers(self, service):
        service_zone = self.service_zones.get(service)
        if not service_zone:
            return

        zone_x1, zone_y1, zone_x2, zone_y2 = service_zone
        padding = 15
        header_height = 40
        server_height = self.server_font.metrics("linespace") + 10
        
        content_y1 = zone_y1 + header_height + padding
        content_y2 = zone_y2 - padding
        
        ip_groups = defaultdict(list)
        for server in self.servers:
            if (server["coords"] == list(server["original_pos"]) 
                and service not in server["services"]):
                ip_groups[server["ip"]].append(server)
        
        servers_to_place = [random.choice(group) for group in ip_groups.values() if group]
        
        cols = 4
        rows = 3
        cell_width = (zone_x2 - zone_x1 - 2*padding) // cols
        cell_height = (content_y2 - content_y1) // rows
        
        placed_positions = []

        for i, server in enumerate(servers_to_place):
            if i >= rows * cols:
                break

            row_idx = i // cols
            col_idx = i % cols

            base_x = zone_x1 + padding + col_idx * cell_width
            base_y = content_y1 + row_idx * cell_height

            new_x = base_x + random.randint(-10, 10)
            new_y = base_y + random.randint(-5, 5)

            new_x, new_y = self.find_free_position(
                new_x,
                new_y,
                self.server_font.measure(server["ip"]) + 20,
                server_height,
                placed_positions
            )

            dx = new_x - server["coords"][0]
            dy = new_y - server["coords"][1]
            
            for item in server["items"]:
                self.canvas.move(item, dx, dy)
            server["coords"] = [new_x, new_y]
            server["services"].add(service)
            placed_positions.append((new_x, new_y))
            
            self.canvas.tag_raise("server")

    def find_free_position(self, x, y, width, height, existing_positions, max_attempts=20):
        for _ in range(max_attempts):
            overlap = False
            for (px, py) in existing_positions:
                if abs(x - px) < width and abs(y - py) < height:
                    overlap = True
                    break
            if not overlap:
                return x, y
            x += random.randint(-10, 10)
            y += random.randint(-5, 5)
        return x, y
    def save_config(self):
     try:
        service_flags = defaultdict(set)
        
        # Собираем все сервисы для каждого уникального IP
        for server in self.servers:
            if server["services"]:
                service_flags[server["ip"]].update(server["services"])

        # Получаем уникальные серверы
        unique_servers = {server["ip"]: server for server in self.servers}
        
        rows = []
        headers = ['server_ip', 'ssh_user', 'ssh_password', 'ssh_port'] + self.services
        rows.append(headers)
        
        # Создаем записи для каждого уникального сервера
        for ip, server in unique_servers.items():
            flags = ['1' if service in service_flags[ip] else '0' 
                    for service in self.services]
            row = [
                ip,
                server["data"][1],  # ssh_user
                server["data"][2],  # ssh_password
                server["data"][3]   # ssh_port
            ] + flags
            rows.append(row)
        
        with open(self.csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, lineterminator='\n')
            writer.writerows(rows)
        
        messagebox.showinfo("Success", f"Saved {len(rows)-1} server configurations!")
    
     except Exception as e:
        messagebox.showerror("Error", f"Save failed: {str(e)}")

    def on_window_resize(self, event):
        if not self.resizing:
            self.resizing = True
            self.after(300, self.finish_resize)

    def finish_resize(self):
        if self.winfo_exists():
            self.draw_services()
            self.resizing = False

    def is_dark(self, hex_color):
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        return (r*0.299 + g*0.587 + b*0.114) < 150

    def start_drag(self, event, server):
        self.active_server = server
        self.start_x = event.x
        self.start_y = event.y
        for item in server["items"]:
            self.canvas.tag_raise(item)

    def drag(self, event, server):
        if self.active_server == server:
            dx = event.x - self.start_x
            dy = event.y - self.start_y
            
            for item in server["items"]:
                self.canvas.move(item, dx, dy)
            
            self.start_x = event.x
            self.start_y = event.y
            server["coords"][0] += dx
            server["coords"][1] += dy

    def end_drag(self, event, server):
        server_rect = (
            server["coords"][0] - 5,
            server["coords"][1] - 5,
            server["coords"][0] + self.server_font.measure(server["ip"]) + 5,
            server["coords"][1] + self.server_font.metrics("linespace") + 5
        )
        
        server["services"].clear()
        for service, zone in self.service_zones.items():
            if self.rect_overlap(server_rect, zone):
                server["services"].add(service)
        
        if not server["services"]:
            self.return_to_stack(server)
        
        self.active_server = None

    def return_to_stack(self, server):
        dx = server["original_pos"][0] - server["coords"][0]
        dy = server["original_pos"][1] - server["coords"][1]
        for item in server["items"]:
            self.canvas.move(item, dx, dy)
        server["coords"][0] = server["original_pos"][0]
        server["coords"][1] = server["original_pos"][1]

    def rect_overlap(self, rect1, rect2):
        return not (rect1[2] < rect2[0] or 
                   rect1[0] > rect2[2] or 
                   rect1[3] < rect2[1] or 
                   rect1[1] > rect2[3])

    def safe_exit(self):
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
            self.destroy()

if __name__ == "__main__":
    app = ServerConfigEditor()
    app.mainloop()
